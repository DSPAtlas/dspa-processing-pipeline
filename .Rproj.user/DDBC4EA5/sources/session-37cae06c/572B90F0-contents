---
title: "DSPA-pipeline"
output:
  html_document: default
  pdf_document: default
  word_document: default
date: "2024-09-17"
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Loading packages 

```{r loading_packages, message=FALSE, warning=FALSE}
if (!requireNamespace("dendextend", quietly = TRUE)) install.packages("dendextend")
if (!requireNamespace("pheatmap", quietly = TRUE)) install.packages("pheatmap")
if (!requireNamespace("seriation", quietly = TRUE)) install.packages("seriation")

library(dendextend)
library(pheatmap)
library(seriation)
library(protti)
library(tidyverse)
library(data.table)
library(dplyr)
library(magrittr)
library(stringr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(magrittr)

source("./src/calculate_peptide_abundance.R")
source("./src/assign_missigness.R")
source("./src/impute_without_comparison.R")
```

## Loading data


```{r loading_data, message=FALSE, warning=FALSE}
DIA_raw <- read_protti("../data/mduennebacke_Report_MD.tsv")
condition_table <- read.delim("../data/mduennebacke_ConditionSetup.tsv")

DIA_raw %<>%
  left_join(condition_table, by = c("r_file_name" = "File.Name"))
```
## filter data

```{r cleaning_data, message = FALSE, warning = FALSE}
DIA_raw$intensity_log2 <- log2(DIA_raw$fg_ms2raw_quantity)

DIA_raw_norm <- protti::normalise(DIA_raw,
  sample = r_file_name,
  intensity_log2 = intensity_log2,
  method = "median"
)

protti::qc_median_intensities(
  DIA_raw_norm,
  r_file_name,
  pep_grouping_key,
  normalised_intensity_log2,
  plot = TRUE,
  interactive = FALSE
)

DIA_clean <- DIA_raw_norm %>%
  dplyr::filter(fg_quantity > 1000) %>%
  dplyr::filter(pep_is_proteotypic == T)

protti::qc_median_intensities(
  DIA_clean,
  r_file_name,
  pep_grouping_key,
  normalised_intensity_log2,
  plot = TRUE,
  interactive = FALSE
)


DIA_clean$fg_id <- paste0(DIA_clean$fg_labeled_sequence, DIA_clean$fg_charge)

unis <- unique(DIA_clean$pg_protein_accessions) # make vector for fetch_uniprot
```



## Load data from uniprot and join with DIA dataframe

```{r uniprot, message = FALSE, warning = FALSE}

uniprot <- # download protein information from UniProt
  protti::fetch_uniprot(
    unis,
    columns =  c(
      "protein_name",
      "gene_names",
      "length",
      "sequence",
      "xref_pdb"
    )
  )

DIA_clean_uniprot <- DIA_clean %>%
  left_join(uniprot, by = c("pg_protein_accessions" = "accession")) %>% # rejoin with annotations
  find_peptide(sequence, pep_stripped_sequence) %>%
  protti::assign_peptide_type(aa_before, last_aa, aa_after) %>%
  distinct()

DIA_clean_uniprot$condrep <- paste(DIA_clean_uniprot$r_condition, DIA_clean_uniprot$r_replicate, sep = "_")

proteins_identified <- uniprot %>%
  distinct(accession)

```


## Imputation on precursor lvl 

```{r imputation_on_precursor_lvl, message = FALSE, warning = FALSE}
result_ludovic_assign_missingness <- ludovic_assign_missingness(
  data = DIA_clean,
  file_name = r_file_name,
  r_condition = Condition,
  r_condrep = Replicate,
  precursor = fg_id, 
  intensity = intensity_log2
)

data_imputed <- impute_without_comparison(
   result_ludovic_assign_missingness ,
   sample = r_file_name,
   grouping = fg_id,
   intensity_log2 = intensity_log2,
   condition = Condition,
   missingness = missingness,
   method = "ludovic",
 )

```


## Calcualte Peptide Abundance

```{r peptide_abundance, message = FALSE, warning = FALSE}
peptide_abundance <- calculate_peptide_abundance(
  data_imputed,
  sample = r_file_name,
  precursor = fg_id,
  peptide = pep_stripped_sequence,
  intensity_log2 = imputed_intensity,
  method = "sum",
  for_plot = FALSE
 )
```


##sum up precursors to peptide lvl and keep only one entry per pep_stripped_sequence
###code here needs to be adjusted for protti function

```{r sum_and_Filter_for_stripped_sequence, message = FALSE, warning = FALSE}
DIA_clean_uniprot_summed <- DIA_clean_uniprot %>%
  mutate(intensity = 2^normalised_intensity_log2) %>%
  group_by(condrep, pep_stripped_sequence) %>%
  mutate(summed_intensity = sum(intensity), .keep_all = TRUE) %>%
  mutate(summed_intensity_log2 = log2(summed_intensity)) %>%
  distinct(pep_stripped_sequence, .keep_all = TRUE) %>%
  ungroup()

DIA_clean_uniprot_summed <- DIA_clean_uniprot_summed %>%
  group_by(r_file_name, pep_stripped_sequence) %>%
  slice(1) %>%
  ungroup() %>%
  select(-starts_with("fg_"), -starts_with("eg_"))
```

# Quality Control

##CV

```{r quality_control_cvs, fig.width = 12, fig.align= "center",  message = FALSE, warning = FALSE}

protti::qc_cvs(
  data = DIA_clean_uniprot,
  grouping = fg_id,
  condition = r_condition,
  intensity = fg_quantity,
  plot = FALSE
)

protti::qc_cvs(
  data = DIA_clean_uniprot,
  grouping = fg_id,
  condition = r_condition,
  intensity = fg_quantity,
  plot_style = "density",
  plot = TRUE
)

protti::qc_cvs(
  data = DIA_clean_uniprot,
  grouping = fg_id,
  condition = r_condition,
  intensity = fg_quantity,
  plot_style = "violin",
  plot = TRUE
)

```

## Intensity distribution

Intensity distributions are plotted for the whole dataset.

```{r quality_control_log2_int_distr, fig.align= "center", message = FALSE, warning = FALSE}
protti::qc_intensity_distribution(
  DIA_clean_uniprot,
  condrep,
  pep_grouping_key,
  intensity_log2,
  plot_style = "histogram"
)

```

## Missed cleavages


```{r quality_control_missed_cleav, fig.align= "center", message = FALSE, warning = FALSE}
protti::qc_missed_cleavages(
  DIA_clean_uniprot,
  condrep,
  fg_id,
  pep_nr_of_missed_cleavages,
  fg_quantity,
  method = "intensity",
  plot = TRUE,
  interactive = FALSE
)

protti::qc_missed_cleavages(
  DIA_clean_uniprot,
  condrep,
  fg_id,
  pep_nr_of_missed_cleavages,
  fg_quantity,
  method = "count",
  plot = TRUE,
  interactive = FALSE
)
```

## Peptide types

Peptide type (tryptic, semi-tryptic, non-tryptic) distributions are even throughout the different samples.

```{r quality_control_pep_type, fig.align = "center", message = FALSE, warning = FALSE}

protti::qc_peptide_type(
  DIA_clean_uniprot,
  condrep,
  fg_id,
  pep_type,
  intensity = fg_quantity,
  method = "count",
  plot = TRUE,
  interactive = FALSE
)

protti::qc_peptide_type(
  DIA_clean_uniprot,
  condrep,
  fg_id,
  pep_type,
  intensity = fg_quantity,
  method = "intensity",
  plot = TRUE,
  interactive = FALSE
)

```

## Number of peptide IDs per sample

The numbers of identified peptides are consistent throughout the different samples.

```{r quality_control_pep_ID, fig.align = "center", message = FALSE, warning = FALSE}

DIA_raw$condrep <- paste(DIA_raw$r_condition, DIA_raw$r_replicate, sep = "_")

protti::qc_ids(DIA_raw, condrep, pep_grouping_key, condition = r_condition, intensity = fg_quantity)

```

## Principal component analysis (PCA)

```{r PCA, message = FALSE, warning = FALSE}

DIA_clean_uniprot %>%
  protti::qc_pca(condrep, 
       pep_grouping_key, 
       intensity_log2, 
       r_condition)

```



## corelation_map


```{r correlation_map, message = FALSE, warning = FALSE}

protti::qc_sample_correlation(
  data = DIA_clean_uniprot,
  sample = r_file_name,
  grouping = fg_id,
  intensity_log2 = intensity_log2,
  condition = r_condition
)

```

# Data analysis
## Volcano plots peptide lvl


```{r Volcano_plot, message = FALSE, warning = FALSE}

Volcano_input <- unique_pep_filt %>%
  unique() %>%
  protti::assign_missingness(r_file_name,
                     r_condition,
                     pep_stripped_sequence,
                     normalised_intensity_log2,
                     ref_condition = "CTR",
                     retain_columns = c(pg_protein_accessions, pep_stripped_sequence, start, end, pep_type, sequence, length))


Volcano_input = Volcano_input %>%
  dplyr::filter(is.na(sequence)== F)



#differential analysis

t_test_result_proDA_pep <- protti::calculate_diff_abundance(
  data = Volcano_input,
                                r_file_name,
                                r_condition,
                                pep_stripped_sequence,
                                normalised_intensity_log2,
                                missingness,
                                comparison = comparison,
                                ref_condition = "CTR",
                                method = "moderated_t-test",
                                retain_columns = c(pg_protein_accessions, pep_stripped_sequence, start, end, pep_type, sequence, length))



condition_vulcano <- c("Aza_1_vs_DMSO_1")
t_test_result_proDA_pep_comp <- t_test_result_proDA_pep[t_test_result_proDA_pep$comparison %in% condition_vulcano, ]


volcano_plot(t_test_result_proDA_pep_comp, pep_stripped_sequence, diff, adj_pval, method = "target", target_column = pg_protein_accessions, target = c("P26365") ,  x_axis_label = "log2(fold change) Mercapto vs. DMSO", title = "Volcano plot peptide level", y_axis_label = "-log10(q-value)", log2FC_cutoff = 1, significance_cutoff = 0.05, interactive = T)
```







